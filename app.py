import streamlit as st
import os
from dotenv import load_dotenv
import google.generativeai as genai

# Load API key cho Gemini
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY", st.secrets.get("GOOGLE_API_KEY", "")))

# Ki·ªÉm tra c√°c m√¥ h√¨nh c√≥ s·∫µn
models = genai.list_models()
available_models = [model.name for model in models]
st.write(f"C√°c m√¥ h√¨nh c√≥ s·∫µn: {available_models}")

# S·ª≠ d·ª•ng m·ªôt m√¥ h√¨nh h·ª£p l·ªá
model_name = "your_model_name_here"  # Thay th·∫ø v·ªõi m√¥ h√¨nh b·∫°n mu·ªën s·ª≠ d·ª•ng (ch·∫≥ng h·∫°n "text-bison" n·∫øu c√≥)

if "chat" not in st.session_state:
    model = genai.GenerativeModel(model_name)
    st.session_state.chat = model.start_chat()

# Tu·ª≥ ch·ªânh AI
st.sidebar.header("‚öôÔ∏è Tu·ª≥ ch·ªânh")
ai_name = st.sidebar.text_input("PhoGPT", value=st.session_state.get("ai_name", "PhoGPT"))
st.session_state.ai_name = ai_name

# Header
st.title(f"ü§ñ {ai_name}")
st.caption(f"üß† Tr√≤ chuy·ªán c√πng {ai_name}, tr·ª£ l√Ω AI powered by Gemini")

# X√≥a h·ªôi tho·∫°i
if st.button("üßπ X√≥a h·ªôi tho·∫°i"):
    st.session_state.history = []

# L∆∞u h·ªôi tho·∫°i
if "history" not in st.session_state:
    st.session_state.history = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
for role, msg in st.session_state.history:
    with st.chat_message("user" if role == "user" else "assistant"):
        st.markdown(msg)

# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
user_input = st.chat_input(f"üí¨ H√£y tr√≤ chuy·ªán v·ªõi {ai_name}...")

if user_input:
    with st.chat_message("user"):
        st.markdown(user_input)
    st.session_state.history.append(("user", user_input))

    with st.chat_message("assistant"):
        with st.spinner("üß† ƒêang suy nghƒ©..."):
            try:
                response = st.session_state.chat.send_message(user_input)
                reply = response.text
                st.markdown(reply)
                st.session_state.history.append(("assistant", reply))

                # Ki·ªÉm tra n·∫øu ph·∫£n h·ªìi c√≥ li√™n k·∫øt h√¨nh ·∫£nh
                if "http" in reply and (".jpg" in reply or ".png" in reply or ".jpeg" in reply):
                    st.image(reply, caption="H√¨nh ·∫£nh li√™n quan", use_column_width=True)

            except Exception as e:
                error_msg = f"‚ùå L·ªói: {e}"
                st.error(error_msg)
                st.session_state.history.append(("assistant", error_msg))