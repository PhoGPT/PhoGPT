import streamlit as st
import os
import json
from PIL import Image
import base64
import datetime
import markdown

# T·∫°o t·ªáp l∆∞u tr·ªØ ng∆∞·ªùi d√πng n·∫øu ch∆∞a c√≥
USER_DATA_FILE = "users.json"

# Ki·ªÉm tra xem t·ªáp l∆∞u tr·ªØ ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu kh√¥ng th√¨ t·∫°o m·ªõi
if not os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "w") as f:
        json.dump({}, f)

# ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
def register_user(username, password):
    with open(USER_DATA_FILE, "r") as f:
        users = json.load(f)
    if username in users:
        return False  # T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i
    users[username] = password
    with open(USER_DATA_FILE, "w") as f:
        json.dump(users, f)
    return True

# ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
def login_user(username, password):
    with open(USER_DATA_FILE, "r") as f:
        users = json.load(f)
    if username in users and users[username] == password:
        return True
    return False

# ƒê·∫∑t t√™n m·∫∑c ƒë·ªãnh cho AI
DEFAULT_AI_NAME = "PhoGPT"

# ƒê·∫∑t c·∫•u h√¨nh cho trang
st.set_page_config(page_title="ü§ñ PhoGPT AI", page_icon="assets/logo.png", layout="centered")

# Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng khi ƒë√£ ƒëƒÉng nh·∫≠p
if "user_logged_in" in st.session_state and st.session_state.user_logged_in:
    ai_name = f"Xin ch√†o, {st.session_state.username}!"
else:
    ai_name = DEFAULT_AI_NAME

# Ch·ª©c nƒÉng ƒëƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p
def user_login_registration():
    if "user_logged_in" not in st.session_state or not st.session_state.user_logged_in:
        st.title("ƒêƒÉng k√Ω v√† ƒêƒÉng nh·∫≠p")
        action = st.selectbox("Ch·ªçn h√†nh ƒë·ªông", ["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"])

        username = st.text_input("T√™n ng∆∞·ªùi d√πng")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")

        if action == "ƒêƒÉng k√Ω":
            if st.button("ƒêƒÉng k√Ω"):
                if register_user(username, password):
                    st.success("ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.")
                else:
                    st.error("T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.")
        elif action == "ƒêƒÉng nh·∫≠p":
            if st.button("ƒêƒÉng nh·∫≠p"):
                if login_user(username, password):
                    st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                    st.session_state.user_logged_in = True
                    st.session_state.username = username
                    st.experimental_rerun()  # T·∫£i l·∫°i trang
                else:
                    st.error("T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")
    else:
        st.session_state.user_logged_in = True
        st.session_state.username = st.session_state.username

# G·ªçi h√†m ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω
user_login_registration()

# Ch·ªâ cho ph√©p ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng
if "user_logged_in" in st.session_state and st.session_state.user_logged_in:
    # Load Google API Key t·ª´ secrets.toml
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
    except KeyError:
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong secrets.toml.")
        st.stop()

    # C·∫•u h√¨nh Gemini API
    try:
        import google.generativeai as genai
        genai.configure(api_key=api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói c·∫•u h√¨nh API: {e}")
        st.stop()

    # Ch·ªçn m√¥ h√¨nh Gemini ·ªïn ƒë·ªãnh
    MODEL_NAME = "models/gemini-1.5-pro"

    # Sidebar c√†i ƒë·∫∑t
    st.sidebar.title("‚öôÔ∏è C√†i ƒë·∫∑t")

    # Danh m·ª•c ƒëo·∫°n chat
    st.sidebar.markdown("---")
    st.sidebar.subheader("üóÇÔ∏è Danh m·ª•c ƒëo·∫°n chat")
    if "chat_logs" not in st.session_state:
        st.session_state.chat_logs = []

    for i, (ts, preview) in enumerate(st.session_state.chat_logs):
        if st.sidebar.button(f"üìå {ts}", key=f"chat_{i}"):
            st.session_state.history = preview
            model = genai.GenerativeModel(MODEL_NAME)
            st.session_state.chat = model.start_chat(history=preview)

    # CSS t√πy ch·ªânh giao di·ªán + hi·ªáu ·ª©ng
    hour = datetime.datetime.now().hour
    bg_color = "linear-gradient(135deg, #2c2c2c, #3a3a3a)" if hour >= 18 else "linear-gradient(135deg, #f5f7fa, #c3cfe2)"
    background_style = f"""
        <style>
        .main {{
            background: {bg_color};
            font-family: 'Segoe UI', sans-serif;
            transition: background 1s ease-in-out;
        }}
        .chat-box {{
            background-color: #ffffffcc;
            padding: 1.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            backdrop-filter: blur(8px);
            transform: translateY(10px);
            opacity: 0;
            animation: fadeIn 0.6s ease-in-out forwards;
        }}
        .avatar {{
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }}
        </style>
    """
    st.markdown(background_style, unsafe_allow_html=True)

    # Ti√™u ƒë·ªÅ ch√≠nh
    st.title(f"ü§ñ {ai_name}")
    st.caption(f"üß† Tr√≤ chuy·ªán c√πng {ai_name}, tr·ª£ l√Ω AI th√¥ng minh t·ª´ Gemini")

    # N√∫t x√≥a h·ªôi tho·∫°i
    if st.sidebar.button("üßπ X√≥a h·ªôi tho·∫°i"):
        st.session_state.history = []

    # N√∫t b·∫Øt ƒë·∫ßu chat m·ªõi
    if st.sidebar.button("üí¨ ƒêo·∫°n chat m·ªõi"):
        if st.session_state.get("history"):
            timestamp = datetime.datetime.now().strftime("%H:%M:%S")
            st.session_state.chat_logs.insert(0, (timestamp, st.session_state.history.copy()))
        st.session_state.history = []
        try:
            model = genai.GenerativeModel(MODEL_NAME)
            st.session_state.chat = model.start_chat()
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh m·ªõi: {e}")

    # N√∫t t·∫£i ƒëo·∫°n chat
    if st.sidebar.button("üì• T·∫£i ƒëo·∫°n chat"):
        if st.session_state.get("history"):
            filename = f"chat_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            content = "\n".join([f"{r.upper()}: {m}" for r, m in st.session_state.history])
            b64 = base64.b64encode(content.encode()).decode()
            href = f'<a href="data:file/txt;base64,{b64}" download="{filename}">üìÑ T·∫£i xu·ªëng {filename}</a>'
            st.sidebar.markdown(href, unsafe_allow_html=True)

    # Kh·ªüi t·∫°o model chat
    if "chat" not in st.session_state:
        try:
            model = genai.GenerativeModel(MODEL_NAME)
            st.session_state.chat = model.start_chat()
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh Gemini: {e}")
            st.stop()

    # Kh·ªüi t·∫°o history n·∫øu ch∆∞a c√≥
    if "history" not in st.session_state:
        st.session_state.history = []

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
    avatar_user = "https://i.pinimg.com/236x/5e/e0/82/5ee082781b8c41406a2a50a0f32d6aa6.jpg"
    avatar_ai = "https://scontent.fhph2-1.fna.fbcdn.net/v/t39.30808-6/490392190_678654707977227_1765116453897262223_n.jpg"

    for role, msg in st.session_state.history:
        avatar = avatar_user if role == "user" else avatar_ai
        with st.container():
            msg_html = markdown.markdown(msg)
            st.markdown(f'''
                <div class="chat-box">
                    <img class="avatar" src="{avatar}" alt="avatar" />
                    <div>{msg_html}</div>
                </div>
            ''', unsafe_allow_html=True)

    # Nh·∫≠p tin nh·∫Øn ng∆∞·ªùi d√πng
    user_input = st.chat_input(f"Nh·∫≠p c√¢u h·ªèi cho {ai_name}...")

    if user_input:
        st.session_state.history.append(("user", user_input))
        with st.spinner(f"üîÑ {ai_name} ƒëang ph·∫£n h·ªìi..."):
            try:
                response = st.session_state.chat.send_message(user_input)
                reply = response.text.strip().rstrip("|")
                st.session_state.history.append(("assistant", reply))

                if any(ext in reply for ext in [".jpg", ".png", ".jpeg"]):
                    for word in reply.split():
                        if word.startswith("http") and any(ext in word for ext in [".jpg", ".png", ".jpeg"]):
                            st.image(word, caption="H√¨nh ·∫£nh li√™n quan", use_column_width=True)

            except Exception as e:
                error_msg = f"‚ùå L·ªói: {e}"
                st.error(error_msg)
                st.session_state.history.append(("assistant", error_msg))