import streamlit as st
import os
from dotenv import load_dotenv
from PIL import Image
import datetime
import google.generativeai as genai

# PH·∫¢I ƒë·∫∑t set_page_config tr∆∞·ªõc b·∫•t k·ª≥ l·ªánh streamlit n√†o kh√°c
st.set_page_config(
    page_title="ü§ñ PhoGPT AI", 
    page_icon="assets/logo.png",  # ƒê·∫∑t logo t·ª´ th∆∞ m·ª•c assets
    layout="centered"
)

# ƒê·∫∑t t√™n m·∫∑c ƒë·ªãnh cho AI
DEFAULT_AI_NAME = "PhoGPT"

# L·∫•y API key t·ª´ secrets.toml
try:
    api_key = st.secrets["google"]["GOOGLE_API_KEY"]
except KeyError:
    st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong secrets.toml.")
    st.stop()

# C·∫•u h√¨nh m√¥ h√¨nh Google AI
genai.configure(api_key=api_key)

# Ch·ªçn m√¥ h√¨nh Gemini (m·∫∑c ƒë·ªãnh l√† m√¥ h√¨nh m·ªõi nh·∫•t c√≥ h·ªó tr·ª£ generateContent)
MODEL_NAME = "models/gemini-2.5-pro-exp-03-25"  # Ki·ªÉm tra l·∫°i t√™n m√¥ h√¨nh

# Kh·ªüi t·∫°o model chat
if "chat" not in st.session_state:
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        st.session_state.chat = model.start_chat()
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh Gemini: {e}")
        st.stop()

# Sidebar c√†i ƒë·∫∑t
st.sidebar.title("‚öôÔ∏è C√†i ƒë·∫∑t")
ai_name = st.sidebar.text_input("T√™n tr·ª£ l√Ω AI", value=st.session_state.get("ai_name", DEFAULT_AI_NAME))
dark_mode = st.sidebar.checkbox("üåô Dark mode")
selected_voice = st.sidebar.selectbox("üîä Ch·ªçn gi·ªçng ph·∫£n h·ªìi", ["N·ªØ chu·∫©n", "Nam tr·∫ßm", "Tr·∫ª trung"])
st.session_state.ai_name = ai_name

# CSS t√πy ch·ªânh giao di·ªán + hi·ªáu ·ª©ng
# Background theo gi·ªù
hour = datetime.datetime.now().hour
if 6 <= hour < 18:
    bg_color = "linear-gradient(135deg, #f5f7fa, #c3cfe2)"
else:
    bg_color = "linear-gradient(135deg, #1e1e1e, #2b2b2b)"

background_style = f"""
    <style>
    .main {{
        background: {bg_color};
        font-family: 'Segoe UI', sans-serif;
        transition: background 1s ease-in-out;
        animation: bgFade 20s ease-in-out infinite alternate;
    }}
    body, .main, .block-container {{
        transition: all 0.5s ease-in-out;
    }}
    .dark .main {{
        background: linear-gradient(135deg, #2c2c2c, #3a3a3a);
        color: #f0f0f0;
    }}
    @keyframes bgFade {{
        0% {{ background-position: 0% 50%; }}
        100% {{ background-position: 100% 50%; }}
    }}
    .chat-box {{
        background-color: #ffffffcc;
        padding: 1.5rem;
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
        backdrop-filter: blur(8px);
        transform: translateY(10px);
        opacity: 0;
        animation: fadeIn 0.6s ease-in-out forwards;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }}
    .avatar {{
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }}
    @keyframes fadeIn {{
        to {{ opacity: 1; transform: translateY(0); }}
    }}
    .typing {{
        display: inline-block;
        overflow: hidden;
        border-right: .15em solid orange;
        white-space: nowrap;
        animation: typing 3s steps(40, end), blink .75s step-end infinite;
    }}
    @keyframes typing {{
        from {{ width: 0 }}
        to {{ width: 100% }}
    }}
    @keyframes blink {{
        from, to {{ border-color: transparent }}
        50% {{ border-color: orange }}
    }}
    .dark .chat-box {{
        background-color: #444444aa;
        color: #f0f0f0;
    }}
    </style>
"""

st.markdown(background_style, unsafe_allow_html=True)

# Hi·ªÉn th·ªã logo v√† ti√™u ƒë·ªÅ ch√≠nh
st.image("assets/logo.png", width=150)  # Thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ªßa logo t√πy √Ω
st.title(f"ü§ñ {ai_name}")
st.caption(f"üß† Tr√≤ chuy·ªán c√πng {ai_name}, tr·ª£ l√Ω AI th√¥ng minh t·ª´ Gemini")

# N√∫t x√≥a h·ªôi tho·∫°i
if st.sidebar.button("üßπ X√≥a h·ªôi tho·∫°i"):
    st.session_state.history = []

# Kh·ªüi t·∫°o history n·∫øu ch∆∞a c√≥
if "history" not in st.session_state:
    st.session_state.history = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
avatar_user = "https://i.imgur.com/7q6cP1B.png"
avatar_ai = "https://i.imgur.com/N5uCbDu.png"

for role, msg in st.session_state.history:
    avatar = avatar_user if role == "user" else avatar_ai
    role_class = "user-msg" if role == "user" else "assistant-msg"
    typing_class = "typing" if role == "assistant" else ""
    with st.container():
        st.markdown(f'''
            <div class="chat-box {role_class}">
                <img class="avatar" src="{avatar}" alt="avatar" />
                <div class="{typing_class}">{msg}</div>
            </div>
        ''', unsafe_allow_html=True)

# Nh·∫≠p tin nh·∫Øn ng∆∞·ªùi d√πng
user_input = st.text_input(f"Nh·∫≠p c√¢u h·ªèi cho {ai_name}...")

if user_input:
    st.session_state.history.append(("user", user_input))
    with st.spinner(f"üîÑ {ai_name} ƒëang ph·∫£n h·ªìi..."):
        try:
            response = st.session_state.chat.send_message(user_input)
            reply = response.text
            st.session_state.history.append(("assistant", reply))

            # T√¨m v√† hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu c√≥ li√™n k·∫øt ·∫£nh trong ph·∫£n h·ªìi
            if any(ext in reply for ext in [".jpg", ".png", ".jpeg"]):
                for word in reply.split():
                    if word.startswith("http") and any(ext in word for ext in [".jpg", ".png", ".jpeg"]):
                        st.image(word, caption="H√¨nh ·∫£nh li√™n quan", use_column_width=True)

        except Exception as e:
            error_msg = f"‚ùå L·ªói: {e}"
            st.error(error_msg)
            st.session_state.history.append(("assistant", error_msg))
